# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Kandang {
  id: ID!
  name: String
  periodes(where: PeriodeWhereInput! = {}, orderBy: [PeriodeOrderByInput!]! = [], take: Int, skip: Int! = 0): [Periode!]
  periodesCount(where: PeriodeWhereInput! = {}): Int
}

input KandangWhereUniqueInput {
  id: ID
}

input KandangWhereInput {
  AND: [KandangWhereInput!]
  OR: [KandangWhereInput!]
  NOT: [KandangWhereInput!]
  id: IDFilter
  name: StringFilter
  periodes: PeriodeManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PeriodeManyRelationFilter {
  every: PeriodeWhereInput
  some: PeriodeWhereInput
  none: PeriodeWhereInput
}

input KandangOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input KandangUpdateInput {
  name: String
  periodes: PeriodeRelateToManyForUpdateInput
}

input PeriodeRelateToManyForUpdateInput {
  disconnect: [PeriodeWhereUniqueInput!]
  set: [PeriodeWhereUniqueInput!]
  create: [PeriodeCreateInput!]
  connect: [PeriodeWhereUniqueInput!]
}

input KandangUpdateArgs {
  where: KandangWhereUniqueInput!
  data: KandangUpdateInput!
}

input KandangCreateInput {
  name: String
  periodes: PeriodeRelateToManyForCreateInput
}

input PeriodeRelateToManyForCreateInput {
  create: [PeriodeCreateInput!]
  connect: [PeriodeWhereUniqueInput!]
}

type Periode {
  id: ID!
  number: Int
  startAt: CalendarDay
  kandang: Kandang
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PeriodeWhereUniqueInput {
  id: ID
}

input PeriodeWhereInput {
  AND: [PeriodeWhereInput!]
  OR: [PeriodeWhereInput!]
  NOT: [PeriodeWhereInput!]
  id: IDFilter
  number: IntFilter
  startAt: CalendarDayFilter
  kandang: KandangWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input PeriodeOrderByInput {
  id: OrderDirection
  number: OrderDirection
  startAt: OrderDirection
}

input PeriodeUpdateInput {
  number: Int
  startAt: CalendarDay
  kandang: KandangRelateToOneForUpdateInput
}

input KandangRelateToOneForUpdateInput {
  create: KandangCreateInput
  connect: KandangWhereUniqueInput
  disconnect: Boolean
}

input PeriodeUpdateArgs {
  where: PeriodeWhereUniqueInput!
  data: PeriodeUpdateInput!
}

input PeriodeCreateInput {
  number: Int
  startAt: CalendarDay!
  kandang: KandangRelateToOneForCreateInput
}

input KandangRelateToOneForCreateInput {
  create: KandangCreateInput
  connect: KandangWhereUniqueInput
}

type DataDOC {
  id: ID!
  periode: Periode
  jumlahDOC: Int
  tipeDOC: String
  kematianDOC: Int
  bobotBox: Int
  kodeBox: String
  samples(where: SampleDOCWhereInput! = {}, orderBy: [SampleDOCOrderByInput!]! = [], take: Int, skip: Int! = 0): [SampleDOC!]
  samplesCount(where: SampleDOCWhereInput! = {}): Int
}

input DataDOCWhereUniqueInput {
  id: ID
}

input DataDOCWhereInput {
  AND: [DataDOCWhereInput!]
  OR: [DataDOCWhereInput!]
  NOT: [DataDOCWhereInput!]
  id: IDFilter
  periode: PeriodeWhereInput
  jumlahDOC: IntFilter
  tipeDOC: StringFilter
  kematianDOC: IntFilter
  bobotBox: IntFilter
  kodeBox: StringFilter
  samples: SampleDOCManyRelationFilter
}

input SampleDOCManyRelationFilter {
  every: SampleDOCWhereInput
  some: SampleDOCWhereInput
  none: SampleDOCWhereInput
}

input DataDOCOrderByInput {
  id: OrderDirection
  jumlahDOC: OrderDirection
  tipeDOC: OrderDirection
  kematianDOC: OrderDirection
  bobotBox: OrderDirection
  kodeBox: OrderDirection
}

input DataDOCUpdateInput {
  periode: PeriodeRelateToOneForUpdateInput
  jumlahDOC: Int
  tipeDOC: String
  kematianDOC: Int
  bobotBox: Int
  kodeBox: String
  samples: SampleDOCRelateToManyForUpdateInput
}

input PeriodeRelateToOneForUpdateInput {
  create: PeriodeCreateInput
  connect: PeriodeWhereUniqueInput
  disconnect: Boolean
}

input SampleDOCRelateToManyForUpdateInput {
  disconnect: [SampleDOCWhereUniqueInput!]
  set: [SampleDOCWhereUniqueInput!]
  create: [SampleDOCCreateInput!]
  connect: [SampleDOCWhereUniqueInput!]
}

input DataDOCUpdateArgs {
  where: DataDOCWhereUniqueInput!
  data: DataDOCUpdateInput!
}

input DataDOCCreateInput {
  periode: PeriodeRelateToOneForCreateInput
  jumlahDOC: Int
  tipeDOC: String
  kematianDOC: Int
  bobotBox: Int
  kodeBox: String
  samples: SampleDOCRelateToManyForCreateInput
}

input PeriodeRelateToOneForCreateInput {
  create: PeriodeCreateInput
  connect: PeriodeWhereUniqueInput
}

input SampleDOCRelateToManyForCreateInput {
  create: [SampleDOCCreateInput!]
  connect: [SampleDOCWhereUniqueInput!]
}

type SampleDOC {
  id: ID!
  bobot: Int
}

input SampleDOCWhereUniqueInput {
  id: ID
}

input SampleDOCWhereInput {
  AND: [SampleDOCWhereInput!]
  OR: [SampleDOCWhereInput!]
  NOT: [SampleDOCWhereInput!]
  id: IDFilter
  bobot: IntFilter
}

input SampleDOCOrderByInput {
  id: OrderDirection
  bobot: OrderDirection
}

input SampleDOCUpdateInput {
  bobot: Int
}

input SampleDOCUpdateArgs {
  where: SampleDOCWhereUniqueInput!
  data: SampleDOCUpdateInput!
}

input SampleDOCCreateInput {
  bobot: Int
}

type DataWeekly {
  id: ID!
  periode: Periode
  lantai: Int
  sekat: Int
  samples(where: SampleWeeklyWhereInput! = {}, orderBy: [SampleWeeklyOrderByInput!]! = [], take: Int, skip: Int! = 0): [SampleWeekly!]
  samplesCount(where: SampleWeeklyWhereInput! = {}): Int
}

input DataWeeklyWhereUniqueInput {
  id: ID
}

input DataWeeklyWhereInput {
  AND: [DataWeeklyWhereInput!]
  OR: [DataWeeklyWhereInput!]
  NOT: [DataWeeklyWhereInput!]
  id: IDFilter
  periode: PeriodeWhereInput
  lantai: IntFilter
  sekat: IntFilter
  samples: SampleWeeklyManyRelationFilter
}

input SampleWeeklyManyRelationFilter {
  every: SampleWeeklyWhereInput
  some: SampleWeeklyWhereInput
  none: SampleWeeklyWhereInput
}

input DataWeeklyOrderByInput {
  id: OrderDirection
  lantai: OrderDirection
  sekat: OrderDirection
}

input DataWeeklyUpdateInput {
  periode: PeriodeRelateToOneForUpdateInput
  lantai: Int
  sekat: Int
  samples: SampleWeeklyRelateToManyForUpdateInput
}

input SampleWeeklyRelateToManyForUpdateInput {
  disconnect: [SampleWeeklyWhereUniqueInput!]
  set: [SampleWeeklyWhereUniqueInput!]
  create: [SampleWeeklyCreateInput!]
  connect: [SampleWeeklyWhereUniqueInput!]
}

input DataWeeklyUpdateArgs {
  where: DataWeeklyWhereUniqueInput!
  data: DataWeeklyUpdateInput!
}

input DataWeeklyCreateInput {
  periode: PeriodeRelateToOneForCreateInput
  lantai: Int
  sekat: Int
  samples: SampleWeeklyRelateToManyForCreateInput
}

input SampleWeeklyRelateToManyForCreateInput {
  create: [SampleWeeklyCreateInput!]
  connect: [SampleWeeklyWhereUniqueInput!]
}

type SampleWeekly {
  id: ID!
  periode: Periode
  bobot: Int
}

input SampleWeeklyWhereUniqueInput {
  id: ID
}

input SampleWeeklyWhereInput {
  AND: [SampleWeeklyWhereInput!]
  OR: [SampleWeeklyWhereInput!]
  NOT: [SampleWeeklyWhereInput!]
  id: IDFilter
  periode: PeriodeWhereInput
  bobot: IntFilter
}

input SampleWeeklyOrderByInput {
  id: OrderDirection
  bobot: OrderDirection
}

input SampleWeeklyUpdateInput {
  periode: PeriodeRelateToOneForUpdateInput
  bobot: Int
}

input SampleWeeklyUpdateArgs {
  where: SampleWeeklyWhereUniqueInput!
  data: SampleWeeklyUpdateInput!
}

input SampleWeeklyCreateInput {
  periode: PeriodeRelateToOneForCreateInput
  bobot: Int
}

type DataDaily {
  id: ID!
  periode: Periode
  waktu: DataDailyWaktuType
  jumlahMati: Int
  jumlahAfkir: Int
}

enum DataDailyWaktuType {
  siang
  malam
}

input DataDailyWhereUniqueInput {
  id: ID
}

input DataDailyWhereInput {
  AND: [DataDailyWhereInput!]
  OR: [DataDailyWhereInput!]
  NOT: [DataDailyWhereInput!]
  id: IDFilter
  periode: PeriodeWhereInput
  waktu: DataDailyWaktuTypeNullableFilter
  jumlahMati: IntFilter
  jumlahAfkir: IntFilter
}

input DataDailyWaktuTypeNullableFilter {
  equals: DataDailyWaktuType
  in: [DataDailyWaktuType!]
  notIn: [DataDailyWaktuType!]
  not: DataDailyWaktuTypeNullableFilter
}

input DataDailyOrderByInput {
  id: OrderDirection
  waktu: OrderDirection
  jumlahMati: OrderDirection
  jumlahAfkir: OrderDirection
}

input DataDailyUpdateInput {
  periode: PeriodeRelateToOneForUpdateInput
  waktu: DataDailyWaktuType
  jumlahMati: Int
  jumlahAfkir: Int
}

input DataDailyUpdateArgs {
  where: DataDailyWhereUniqueInput!
  data: DataDailyUpdateInput!
}

input DataDailyCreateInput {
  periode: PeriodeRelateToOneForCreateInput
  waktu: DataDailyWaktuType
  jumlahMati: Int
  jumlahAfkir: Int
}

type DataPanen {
  id: ID!
  periode: Periode
  namaPelanggan: String
  noSPPA: String
  noTruck: String
  namaPengemudi: String
  jumlahAyam: Int
  bobot: Int
}

input DataPanenWhereUniqueInput {
  id: ID
}

input DataPanenWhereInput {
  AND: [DataPanenWhereInput!]
  OR: [DataPanenWhereInput!]
  NOT: [DataPanenWhereInput!]
  id: IDFilter
  periode: PeriodeWhereInput
  namaPelanggan: StringFilter
  noSPPA: StringFilter
  noTruck: StringFilter
  namaPengemudi: StringFilter
  jumlahAyam: IntFilter
  bobot: IntFilter
}

input DataPanenOrderByInput {
  id: OrderDirection
  namaPelanggan: OrderDirection
  noSPPA: OrderDirection
  noTruck: OrderDirection
  namaPengemudi: OrderDirection
  jumlahAyam: OrderDirection
  bobot: OrderDirection
}

input DataPanenUpdateInput {
  periode: PeriodeRelateToOneForUpdateInput
  namaPelanggan: String
  noSPPA: String
  noTruck: String
  namaPengemudi: String
  jumlahAyam: Int
  bobot: Int
}

input DataPanenUpdateArgs {
  where: DataPanenWhereUniqueInput!
  data: DataPanenUpdateInput!
}

input DataPanenCreateInput {
  periode: PeriodeRelateToOneForCreateInput
  namaPelanggan: String
  noSPPA: String
  noTruck: String
  namaPengemudi: String
  jumlahAyam: Int
  bobot: Int
}

type DataPenjarangan {
  id: ID!
  periode: Periode
  namaPelanggan: String
  noSPPA: String
  noTruck: String
  namaPengemudi: String
  jumlahAyam: Int
  bobot: Int
}

input DataPenjaranganWhereUniqueInput {
  id: ID
}

input DataPenjaranganWhereInput {
  AND: [DataPenjaranganWhereInput!]
  OR: [DataPenjaranganWhereInput!]
  NOT: [DataPenjaranganWhereInput!]
  id: IDFilter
  periode: PeriodeWhereInput
  namaPelanggan: StringFilter
  noSPPA: StringFilter
  noTruck: StringFilter
  namaPengemudi: StringFilter
  jumlahAyam: IntFilter
  bobot: IntFilter
}

input DataPenjaranganOrderByInput {
  id: OrderDirection
  namaPelanggan: OrderDirection
  noSPPA: OrderDirection
  noTruck: OrderDirection
  namaPengemudi: OrderDirection
  jumlahAyam: OrderDirection
  bobot: OrderDirection
}

input DataPenjaranganUpdateInput {
  periode: PeriodeRelateToOneForUpdateInput
  namaPelanggan: String
  noSPPA: String
  noTruck: String
  namaPengemudi: String
  jumlahAyam: Int
  bobot: Int
}

input DataPenjaranganUpdateArgs {
  where: DataPenjaranganWhereUniqueInput!
  data: DataPenjaranganUpdateInput!
}

input DataPenjaranganCreateInput {
  periode: PeriodeRelateToOneForCreateInput
  namaPelanggan: String
  noSPPA: String
  noTruck: String
  namaPengemudi: String
  jumlahAyam: Int
  bobot: Int
}

type DataSapronak {
  id: ID!
  periode: Periode
  jumlahPakan: Int
  namaObat: String
  jumlahObat: Int
  satuan: String
}

input DataSapronakWhereUniqueInput {
  id: ID
}

input DataSapronakWhereInput {
  AND: [DataSapronakWhereInput!]
  OR: [DataSapronakWhereInput!]
  NOT: [DataSapronakWhereInput!]
  id: IDFilter
  periode: PeriodeWhereInput
  jumlahPakan: IntFilter
  namaObat: StringFilter
  jumlahObat: IntFilter
  satuan: StringFilter
}

input DataSapronakOrderByInput {
  id: OrderDirection
  jumlahPakan: OrderDirection
  namaObat: OrderDirection
  jumlahObat: OrderDirection
  satuan: OrderDirection
}

input DataSapronakUpdateInput {
  periode: PeriodeRelateToOneForUpdateInput
  jumlahPakan: Int
  namaObat: String
  jumlahObat: Int
  satuan: String
}

input DataSapronakUpdateArgs {
  where: DataSapronakWhereUniqueInput!
  data: DataSapronakUpdateInput!
}

input DataSapronakCreateInput {
  periode: PeriodeRelateToOneForCreateInput
  jumlahPakan: Int
  namaObat: String
  jumlahObat: Int
  satuan: String
}

type DataNonSapronak {
  id: ID!
  periode: Periode
  jenis: String
  jumlah: Int
  satuan: String
}

input DataNonSapronakWhereUniqueInput {
  id: ID
}

input DataNonSapronakWhereInput {
  AND: [DataNonSapronakWhereInput!]
  OR: [DataNonSapronakWhereInput!]
  NOT: [DataNonSapronakWhereInput!]
  id: IDFilter
  periode: PeriodeWhereInput
  jenis: StringFilter
  jumlah: IntFilter
  satuan: StringFilter
}

input DataNonSapronakOrderByInput {
  id: OrderDirection
  jenis: OrderDirection
  jumlah: OrderDirection
  satuan: OrderDirection
}

input DataNonSapronakUpdateInput {
  periode: PeriodeRelateToOneForUpdateInput
  jenis: String
  jumlah: Int
  satuan: String
}

input DataNonSapronakUpdateArgs {
  where: DataNonSapronakWhereUniqueInput!
  data: DataNonSapronakUpdateInput!
}

input DataNonSapronakCreateInput {
  periode: PeriodeRelateToOneForCreateInput
  jenis: String
  jumlah: Int
  satuan: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createKandang(data: KandangCreateInput!): Kandang
  createKandangs(data: [KandangCreateInput!]!): [Kandang]
  updateKandang(where: KandangWhereUniqueInput!, data: KandangUpdateInput!): Kandang
  updateKandangs(data: [KandangUpdateArgs!]!): [Kandang]
  deleteKandang(where: KandangWhereUniqueInput!): Kandang
  deleteKandangs(where: [KandangWhereUniqueInput!]!): [Kandang]
  createPeriode(data: PeriodeCreateInput!): Periode
  createPeriodes(data: [PeriodeCreateInput!]!): [Periode]
  updatePeriode(where: PeriodeWhereUniqueInput!, data: PeriodeUpdateInput!): Periode
  updatePeriodes(data: [PeriodeUpdateArgs!]!): [Periode]
  deletePeriode(where: PeriodeWhereUniqueInput!): Periode
  deletePeriodes(where: [PeriodeWhereUniqueInput!]!): [Periode]
  createDataDOC(data: DataDOCCreateInput!): DataDOC
  createDataDOCS(data: [DataDOCCreateInput!]!): [DataDOC]
  updateDataDOC(where: DataDOCWhereUniqueInput!, data: DataDOCUpdateInput!): DataDOC
  updateDataDOCS(data: [DataDOCUpdateArgs!]!): [DataDOC]
  deleteDataDOC(where: DataDOCWhereUniqueInput!): DataDOC
  deleteDataDOCS(where: [DataDOCWhereUniqueInput!]!): [DataDOC]
  createSampleDOC(data: SampleDOCCreateInput!): SampleDOC
  createSampleDOCS(data: [SampleDOCCreateInput!]!): [SampleDOC]
  updateSampleDOC(where: SampleDOCWhereUniqueInput!, data: SampleDOCUpdateInput!): SampleDOC
  updateSampleDOCS(data: [SampleDOCUpdateArgs!]!): [SampleDOC]
  deleteSampleDOC(where: SampleDOCWhereUniqueInput!): SampleDOC
  deleteSampleDOCS(where: [SampleDOCWhereUniqueInput!]!): [SampleDOC]
  createDataWeekly(data: DataWeeklyCreateInput!): DataWeekly
  createDataWeeklies(data: [DataWeeklyCreateInput!]!): [DataWeekly]
  updateDataWeekly(where: DataWeeklyWhereUniqueInput!, data: DataWeeklyUpdateInput!): DataWeekly
  updateDataWeeklies(data: [DataWeeklyUpdateArgs!]!): [DataWeekly]
  deleteDataWeekly(where: DataWeeklyWhereUniqueInput!): DataWeekly
  deleteDataWeeklies(where: [DataWeeklyWhereUniqueInput!]!): [DataWeekly]
  createSampleWeekly(data: SampleWeeklyCreateInput!): SampleWeekly
  createSampleWeeklies(data: [SampleWeeklyCreateInput!]!): [SampleWeekly]
  updateSampleWeekly(where: SampleWeeklyWhereUniqueInput!, data: SampleWeeklyUpdateInput!): SampleWeekly
  updateSampleWeeklies(data: [SampleWeeklyUpdateArgs!]!): [SampleWeekly]
  deleteSampleWeekly(where: SampleWeeklyWhereUniqueInput!): SampleWeekly
  deleteSampleWeeklies(where: [SampleWeeklyWhereUniqueInput!]!): [SampleWeekly]
  createDataDaily(data: DataDailyCreateInput!): DataDaily
  createDataDailies(data: [DataDailyCreateInput!]!): [DataDaily]
  updateDataDaily(where: DataDailyWhereUniqueInput!, data: DataDailyUpdateInput!): DataDaily
  updateDataDailies(data: [DataDailyUpdateArgs!]!): [DataDaily]
  deleteDataDaily(where: DataDailyWhereUniqueInput!): DataDaily
  deleteDataDailies(where: [DataDailyWhereUniqueInput!]!): [DataDaily]
  createDataPanen(data: DataPanenCreateInput!): DataPanen
  createDataPanens(data: [DataPanenCreateInput!]!): [DataPanen]
  updateDataPanen(where: DataPanenWhereUniqueInput!, data: DataPanenUpdateInput!): DataPanen
  updateDataPanens(data: [DataPanenUpdateArgs!]!): [DataPanen]
  deleteDataPanen(where: DataPanenWhereUniqueInput!): DataPanen
  deleteDataPanens(where: [DataPanenWhereUniqueInput!]!): [DataPanen]
  createDataPenjarangan(data: DataPenjaranganCreateInput!): DataPenjarangan
  createDataPenjarangans(data: [DataPenjaranganCreateInput!]!): [DataPenjarangan]
  updateDataPenjarangan(where: DataPenjaranganWhereUniqueInput!, data: DataPenjaranganUpdateInput!): DataPenjarangan
  updateDataPenjarangans(data: [DataPenjaranganUpdateArgs!]!): [DataPenjarangan]
  deleteDataPenjarangan(where: DataPenjaranganWhereUniqueInput!): DataPenjarangan
  deleteDataPenjarangans(where: [DataPenjaranganWhereUniqueInput!]!): [DataPenjarangan]
  createDataSapronak(data: DataSapronakCreateInput!): DataSapronak
  createDataSapronaks(data: [DataSapronakCreateInput!]!): [DataSapronak]
  updateDataSapronak(where: DataSapronakWhereUniqueInput!, data: DataSapronakUpdateInput!): DataSapronak
  updateDataSapronaks(data: [DataSapronakUpdateArgs!]!): [DataSapronak]
  deleteDataSapronak(where: DataSapronakWhereUniqueInput!): DataSapronak
  deleteDataSapronaks(where: [DataSapronakWhereUniqueInput!]!): [DataSapronak]
  createDataNonSapronak(data: DataNonSapronakCreateInput!): DataNonSapronak
  createDataNonSapronaks(data: [DataNonSapronakCreateInput!]!): [DataNonSapronak]
  updateDataNonSapronak(where: DataNonSapronakWhereUniqueInput!, data: DataNonSapronakUpdateInput!): DataNonSapronak
  updateDataNonSapronaks(data: [DataNonSapronakUpdateArgs!]!): [DataNonSapronak]
  deleteDataNonSapronak(where: DataNonSapronakWhereUniqueInput!): DataNonSapronak
  deleteDataNonSapronaks(where: [DataNonSapronakWhereUniqueInput!]!): [DataNonSapronak]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  kandangs(where: KandangWhereInput! = {}, orderBy: [KandangOrderByInput!]! = [], take: Int, skip: Int! = 0): [Kandang!]
  kandang(where: KandangWhereUniqueInput!): Kandang
  kandangsCount(where: KandangWhereInput! = {}): Int
  periodes(where: PeriodeWhereInput! = {}, orderBy: [PeriodeOrderByInput!]! = [], take: Int, skip: Int! = 0): [Periode!]
  periode(where: PeriodeWhereUniqueInput!): Periode
  periodesCount(where: PeriodeWhereInput! = {}): Int
  dataDOCS(where: DataDOCWhereInput! = {}, orderBy: [DataDOCOrderByInput!]! = [], take: Int, skip: Int! = 0): [DataDOC!]
  dataDOC(where: DataDOCWhereUniqueInput!): DataDOC
  dataDOCSCount(where: DataDOCWhereInput! = {}): Int
  sampleDOCS(where: SampleDOCWhereInput! = {}, orderBy: [SampleDOCOrderByInput!]! = [], take: Int, skip: Int! = 0): [SampleDOC!]
  sampleDOC(where: SampleDOCWhereUniqueInput!): SampleDOC
  sampleDOCSCount(where: SampleDOCWhereInput! = {}): Int
  dataWeeklies(where: DataWeeklyWhereInput! = {}, orderBy: [DataWeeklyOrderByInput!]! = [], take: Int, skip: Int! = 0): [DataWeekly!]
  dataWeekly(where: DataWeeklyWhereUniqueInput!): DataWeekly
  dataWeekliesCount(where: DataWeeklyWhereInput! = {}): Int
  sampleWeeklies(where: SampleWeeklyWhereInput! = {}, orderBy: [SampleWeeklyOrderByInput!]! = [], take: Int, skip: Int! = 0): [SampleWeekly!]
  sampleWeekly(where: SampleWeeklyWhereUniqueInput!): SampleWeekly
  sampleWeekliesCount(where: SampleWeeklyWhereInput! = {}): Int
  dataDailies(where: DataDailyWhereInput! = {}, orderBy: [DataDailyOrderByInput!]! = [], take: Int, skip: Int! = 0): [DataDaily!]
  dataDaily(where: DataDailyWhereUniqueInput!): DataDaily
  dataDailiesCount(where: DataDailyWhereInput! = {}): Int
  dataPanens(where: DataPanenWhereInput! = {}, orderBy: [DataPanenOrderByInput!]! = [], take: Int, skip: Int! = 0): [DataPanen!]
  dataPanen(where: DataPanenWhereUniqueInput!): DataPanen
  dataPanensCount(where: DataPanenWhereInput! = {}): Int
  dataPenjarangans(where: DataPenjaranganWhereInput! = {}, orderBy: [DataPenjaranganOrderByInput!]! = [], take: Int, skip: Int! = 0): [DataPenjarangan!]
  dataPenjarangan(where: DataPenjaranganWhereUniqueInput!): DataPenjarangan
  dataPenjarangansCount(where: DataPenjaranganWhereInput! = {}): Int
  dataSapronaks(where: DataSapronakWhereInput! = {}, orderBy: [DataSapronakOrderByInput!]! = [], take: Int, skip: Int! = 0): [DataSapronak!]
  dataSapronak(where: DataSapronakWhereUniqueInput!): DataSapronak
  dataSapronaksCount(where: DataSapronakWhereInput! = {}): Int
  dataNonSapronaks(where: DataNonSapronakWhereInput! = {}, orderBy: [DataNonSapronakOrderByInput!]! = [], take: Int, skip: Int! = 0): [DataNonSapronak!]
  dataNonSapronak(where: DataNonSapronakWhereUniqueInput!): DataNonSapronak
  dataNonSapronaksCount(where: DataNonSapronakWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
